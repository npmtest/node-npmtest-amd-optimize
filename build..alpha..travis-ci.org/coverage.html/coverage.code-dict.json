{"/home/travis/build/npmtest/node-npmtest-amd-optimize/test.js":"/* istanbul instrument in package npmtest_amd_optimize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/lib.npmtest_amd_optimize.js":"/* istanbul instrument in package npmtest_amd_optimize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_amd_optimize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_amd_optimize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-amd-optimize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_amd_optimize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_amd_optimize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_amd_optimize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_amd_optimize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_amd_optimize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_amd_optimize.__dirname + '/lib.npmtest_amd_optimize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/node_modules/amd-optimize/lib/index.js":"(function() {\n  var Readable, _, async, collectModules, defaultLoader, exportModule, firstChunk, fs, mergeOptionsFile, path, rjs, through, trace, util, vinylFs;\n\n  _ = require(\"lodash\");\n\n  fs = require(\"fs\");\n\n  path = require(\"path\");\n\n  vinylFs = require(\"vinyl-fs\");\n\n  async = require(\"async\");\n\n  through = require(\"through2\");\n\n  Readable = require(\"stream\").Readable;\n\n  trace = require(\"./trace\");\n\n  exportModule = require(\"./export\");\n\n  util = require(\"./util\");\n\n  firstChunk = function(stream, callback) {\n    var settled;\n    settled = false;\n    stream.on(\"data\", function(data) {\n      if (!settled) {\n        settled = true;\n        callback(null, data);\n      }\n    }).on(\"end\", function() {\n      if (!settled) {\n        callback();\n      }\n    }).on(\"error\", function(err) {\n      if (!settled) {\n        settled = true;\n        callback(err);\n      }\n    });\n  };\n\n  collectModules = function(module, omitInline) {\n    var collector, outputBuffer;\n    if (omitInline == null) {\n      omitInline = true;\n    }\n    outputBuffer = [];\n    collector = function(currentModule) {\n      currentModule.deps.forEach(function(depModule) {\n        return collector(depModule);\n      });\n      if (!(omitInline && currentModule.isInline) && !_.any(outputBuffer, {\n        name: currentModule.name\n      })) {\n        return outputBuffer.push(currentModule);\n      }\n    };\n    collector(module);\n    return outputBuffer;\n  };\n\n  mergeOptionsFile = function(file, options) {\n    if (options == null) {\n      options = {};\n    }\n    return _.merge({}, Function(\"var output,\\n  requirejs = require = function() {},\\n  define = function () {};\\nrequire.config = function (options) { output = options; };\\n\" + (file.contents.toString(\"utf8\")) + \";\\nreturn output;\")(), options);\n  };\n\n  defaultLoader = function(fileBuffer, options) {\n    return function(name, callback, asPlainFile) {\n      var addJs, file;\n      addJs = (!asPlainFile) && '.js' || '';\n      if (options.baseUrl && (file = _.detect(fileBuffer, {\n        path: path.resolve(options.baseUrl, name + addJs)\n      }))) {\n        return callback(null, file);\n      } else if (file = _.detect(fileBuffer, {\n        relative: path.join(options.baseUrl, name + addJs)\n      })) {\n        return callback(null, file);\n      } else if (options.loader) {\n        return options.loader(name, callback);\n      } else {\n        return module.exports.loader()(path.join(options.baseUrl, name + addJs), callback);\n      }\n    };\n  };\n\n  module.exports = rjs = function(entryModuleName, options) {\n    var configFileStream, fileBuffer, mainStream;\n    if (options == null) {\n      options = {};\n    }\n    options = _.defaults(options, {\n      baseUrl: \"\",\n      configFile: null,\n      exclude: [],\n      excludeShallow: [],\n      findNestedDependencies: false,\n      loader: null,\n      preserveComments: false,\n      preserveFiles: false\n    });\n    if (_.isString(options.exclude)) {\n      options.exclude = [options.exclude];\n    }\n    if (_.isString(options.excludeShallow)) {\n      options.excludeShallow = [options.excludeShallow];\n    }\n    if (_.isString(options.configFile) || _.isArray(options.configFile)) {\n      configFileStream = vinylFs.src(options.configFile);\n    } else if (_.isObject(options.configFile)) {\n      configFileStream = options.configFile;\n    }\n    fileBuffer = [];\n    mainStream = through.obj(function(file, enc, done) {\n      fileBuffer.push(file);\n      return done();\n    }, function(done) {\n      return async.waterfall([\n        function(callback) {\n          if (configFileStream) {\n            return configFileStream.pipe(through.obj(function(file, enc, done) {\n              options = mergeOptionsFile(file, options);\n              return done();\n            }, function() {\n              return callback();\n            }));\n          } else {\n            return callback();\n          }\n        }, function(callback) {\n          return trace(entryModuleName, options, null, defaultLoader(fileBuffer, options), callback);\n        }, function(module, callback) {\n          return callback(null, collectModules(module));\n        }, function(modules, callback) {\n          if (_.isArray(options.exclude)) {\n            return async.map(options.exclude, function(moduleName, callback) {\n              return trace(moduleName, options, null, defaultLoader(fileBuffer, options), callback);\n            }, function(err, excludedModules) {\n              if (err) {\n                return callback(err);\n              } else {\n                return callback(null, modules, _(excludedModules).map(function(module) {\n                  return collectModules(module);\n                }).flatten().pluck(\"name\").unique().value());\n              }\n            });\n          } else {\n            return callback(null, modules, []);\n          }\n        }, function(modules, excludedModuleNames, callback) {\n          var exportStream;\n          modules = _.reject(modules, function(module) {\n            return _.contains(excludedModuleNames, module.name) || _.contains(options.excludeShallow, module.name);\n          });\n          exportStream = exportModule(options);\n          exportStream.on(\"data\", function(file) {\n            return mainStream.push(file);\n          }).on(\"end\", function() {\n            return callback();\n          }).on(\"error\", callback);\n          modules.forEach(exportStream.write.bind(exportStream));\n          return exportStream.end();\n        }\n      ], done);\n    });\n    return mainStream;\n  };\n\n  module.exports.src = function(moduleName, options) {\n    var source;\n    source = rjs(moduleName, options);\n    process.nextTick(function() {\n      return source.end();\n    });\n    return source;\n  };\n\n  module.exports.loader = function(filenameResolver, pipe) {\n    return function(moduleName, callback) {\n      var filename, source;\n      if (filenameResolver) {\n        filename = filenameResolver(moduleName);\n      } else {\n        filename = moduleName;\n      }\n      source = vinylFs.src(filename).pipe(through.obj());\n      if (pipe) {\n        source = source.pipe(pipe());\n      }\n      firstChunk(source, callback);\n    };\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/node_modules/amd-optimize/lib/trace.js":"(function() {\n  var Module, VinylFile, _, async, fs, parse, path, traceModule, util;\n\n  _ = require(\"lodash\");\n\n  fs = require(\"fs\");\n\n  path = require(\"path\");\n\n  async = require(\"async\");\n\n  VinylFile = require(\"vinyl\");\n\n  parse = require(\"./parse\");\n\n  util = require(\"./util\");\n\n  Module = (function() {\n    function Module(name, file1, deps1) {\n      this.name = name;\n      this.file = file1;\n      this.deps = deps1 != null ? deps1 : [];\n      this.name = util.fixModuleName(this.name);\n      this.isShallow = false;\n      this.isShimmed = false;\n      this.isAnonymous = false;\n      this.isInline = false;\n      this.hasDefine = false;\n      this.astNodes = [];\n    }\n\n    return Module;\n\n  })();\n\n  module.exports = traceModule = function(startModuleName, config, allModules, fileLoader, callback) {\n    var emitModule, foundModuleNames, jsonFiles, resolveInlinedModule, resolveModule, resolveModuleFileName, resolveModuleName, resolveModules, textFiles;\n    if (allModules == null) {\n      allModules = [];\n    }\n    foundModuleNames = [];\n    textFiles = {};\n    jsonFiles = {};\n    resolveModuleName = function(moduleName, relativeTo) {\n      var eligiblePath, isJson, isText, relativeToFileName, slashIdx;\n      if (relativeTo == null) {\n        relativeTo = \"\";\n      }\n      isText = moduleName.indexOf('text!') !== -1;\n      if (isText) {\n        moduleName = moduleName.replace('text!', '');\n      }\n      isJson = moduleName.indexOf('json!') !== -1;\n      if (isJson) {\n        moduleName = moduleName.replace('json!', '');\n      }\n      if (config.paths && !config.paths[moduleName]) {\n        slashIdx = moduleName.indexOf(\"/\");\n        if (slashIdx > 0) {\n          eligiblePath = config.paths[moduleName.substr(0, slashIdx)];\n          if (eligiblePath) {\n            moduleName = eligiblePath + moduleName.substr(slashIdx);\n          }\n        }\n      }\n      relativeToFileName = resolveModuleFileName(relativeTo);\n      if (moduleName[0] === \".\") {\n        moduleName = util.fixModuleName(path.join(path.dirname(relativeToFileName), moduleName));\n      }\n      if (config.map && config.map[relativeTo] && config.map[relativeTo][moduleName]) {\n        moduleName = config.map[relativeTo][moduleName];\n      }\n      if (isText) {\n        textFiles[moduleName] = true;\n      }\n      if (isJson) {\n        jsonFiles[moduleName] = true;\n      }\n      return moduleName;\n    };\n    resolveModuleFileName = function(moduleName) {\n      if (config.paths && config.paths[moduleName]) {\n        moduleName = config.paths[moduleName];\n      }\n      if (/!|^exports$|^require$|^module$|^empty:/.test(moduleName)) {\n\n      } else {\n        return moduleName;\n      }\n    };\n    resolveModules = function(moduleNames, callback) {\n      async.mapSeries(moduleNames, resolveModule, callback);\n    };\n    resolveInlinedModule = function(moduleName, deps, astNode, vinylFile, callback) {\n      async.waterfall([\n        function(callback) {\n          return resolveModules(deps, callback);\n        }, function(modules, callback) {\n          var module;\n          module = new Module(moduleName, vinylFile, _.compact(modules));\n          module.hasDefine = true;\n          module.isInline = true;\n          module.astNodes.push(astNode);\n          emitModule(module);\n          return callback();\n        }\n      ], callback);\n    };\n    resolveModule = function(moduleName, callback) {\n      var fileName, isJsonFile, isTextFile, module;\n      module = _.detect(allModules, {\n        name: moduleName\n      });\n      if (module) {\n        callback(null, module);\n        return;\n      }\n      fileName = resolveModuleFileName(moduleName);\n      if (!fileName) {\n        module = new Module(moduleName);\n        module.isShallow = true;\n        callback(null, emitModule(module));\n        return;\n      }\n      if (_.contains(foundModuleNames, moduleName)) {\n        callback(new Error(\"Circular dependency detected. Module '\" + moduleName + \"' has been processed before.\"));\n        return;\n      } else {\n        foundModuleNames.push(moduleName);\n      }\n      module = null;\n      isTextFile = !!textFiles[moduleName];\n      isJsonFile = !!jsonFiles[moduleName];\n      async.waterfall([\n        function(callback) {\n          return fileLoader(fileName, callback, isTextFile || isJsonFile);\n        }, function(file, callback) {\n          if (arguments.length === 1) {\n            callback = file;\n            file = null;\n          }\n          if (file) {\n            return callback(null, file);\n          } else {\n            return callback(new Error(\"No file for module '\" + moduleName + \"' found.\"));\n          }\n        }, function(file, callback) {\n          file.stringContents = file.contents.toString(\"utf8\");\n          if (isTextFile) {\n            file.stringContents = 'define(function(){ return ' + JSON.stringify(file.stringContents) + '; });';\n          }\n          if (isJsonFile) {\n            file.stringContents = 'define(function(){ return JSON.parse(' + JSON.stringify(file.stringContents) + '); });';\n          }\n          module = new Module(moduleName, file);\n          return callback(null, file);\n        }, parse.bind(null, config), function(file, definitions, callback) {\n          if (_.filter(definitions, function(def) {\n            var ref;\n            return def.method === \"define\" && def.moduleName === void 0 && (0 < (ref = def.argumentsLength) && ref < 3);\n          }).length > 1) {\n            callback(new Error(\"A module must not have more than one anonymous 'define' calls.\"));\n            return;\n          }\n          module.hasDefine = _.any(definitions, function(def) {\n            return def.method === \"define\" && (def.moduleName === void 0 || def.moduleName === moduleName);\n          });\n          return async.mapSeries(definitions, function(def, callback) {\n            def.deps = def.deps.map(function(depName) {\n              var ref;\n              return resolveModuleName(depName, (ref = def.moduleName) != null ? ref : moduleName);\n            });\n            if (def.method === \"define\" && def.moduleName !== void 0 && def.moduleName !== moduleName) {\n              async.waterfall([\n                function(callback) {\n                  return resolveInlinedModule(def.moduleName, def.deps, def.node, file, callback);\n                }, function(callback) {\n                  return callback(null, []);\n                }\n              ], callback);\n            } else {\n              module.astNodes.push(def.node);\n              resolveModules(def.deps, callback);\n            }\n          }, callback);\n        }, function(unflatModules, callback) {\n          return callback(null, _.compact(_.flatten(unflatModules)));\n        }, function(depModules, callback) {\n          var ref;\n          (ref = module.deps).push.apply(ref, depModules);\n          module.isAnonymous = true;\n          async.waterfall([\n            function(callback) {\n              var additionalDepNames, shim;\n              additionalDepNames = null;\n              if (config.shim && (shim = config.shim[module.name])) {\n                if (module.hasDefine) {\n                  console.log(\"[warn]\", \"Module '\" + module.name + \"' is shimmed even though it has a proper define.\");\n                }\n                module.isShimmed = true;\n                if (shim.exports) {\n                  module.exports = shim.exports;\n                }\n                if (_.isArray(shim)) {\n                  additionalDepNames = shim;\n                } else if (shim.deps) {\n                  additionalDepNames = shim.deps;\n                }\n              }\n              if (additionalDepNames) {\n                return resolveModules(additionalDepNames, callback);\n              } else {\n                return callback(null, []);\n              }\n            }, function(depModules, callback) {\n              var ref1;\n              (ref1 = module.deps).push.apply(ref1, depModules);\n              return callback(null, emitModule(module));\n            }\n          ], callback);\n        }\n      ], callback);\n    };\n    emitModule = function(module) {\n      if (!_.any(allModules, {\n        name: module.name\n      })) {\n        allModules.push(module);\n      }\n      return module;\n    };\n    resolveModule(startModuleName, callback);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/node_modules/amd-optimize/lib/parse.js":"(function() {\n  var _, acorn, escodegen, parseRequireDefinitions, valuesFromArrayExpression, walk;\n\n  _ = require(\"lodash\");\n\n  acorn = require(\"acorn\");\n\n  escodegen = require(\"escodegen\");\n\n  walk = require(\"acorn/util/walk\");\n\n  valuesFromArrayExpression = function(expr) {\n    return expr.elements.map(function(a) {\n      return a.value;\n    });\n  };\n\n  module.exports = parseRequireDefinitions = function(config, file, callback) {\n    var ast, comments, definitions, err, tokens;\n    try {\n      if (config.preserveComments) {\n        comments = [];\n        tokens = [];\n        ast = acorn.parse(file.stringContents, {\n          sourceFile: file.relative,\n          locations: file.sourceMap != null,\n          ranges: true,\n          onComment: comments,\n          onToken: tokens\n        });\n        escodegen.attachComments(ast, comments, tokens);\n      } else {\n        ast = acorn.parse(file.stringContents, {\n          sourceFile: file.relative,\n          locations: file.sourceMap != null\n        });\n      }\n    } catch (_error) {\n      err = _error;\n      if (err instanceof SyntaxError) {\n        err.filename = file.path;\n        err.message += \" in \" + file.path;\n      }\n      callback(err);\n      return;\n    }\n    file.ast = ast;\n    definitions = [];\n    walk.ancestor(ast, {\n      CallExpression: function(node, state) {\n        var defineAncestors, deps, isInsideDefine, moduleName;\n        if (node.callee.name === \"define\") {\n          switch (node[\"arguments\"].length) {\n            case 1:\n              if (node[\"arguments\"][0].type === \"FunctionExpression\" && node[\"arguments\"][0].params.length > 0) {\n                deps = ['require', 'exports', 'module'];\n                walk.simple(node[\"arguments\"][0], {\n                  CallExpression: function(node) {\n                    if (node.callee.name === \"require\" || node.callee.name === \"requirejs\") {\n                      return deps.push(node[\"arguments\"][0].value);\n                    }\n                  }\n                });\n              }\n              break;\n            case 2:\n              switch (node[\"arguments\"][0].type) {\n                case \"Literal\":\n                  moduleName = node[\"arguments\"][0].value;\n                  break;\n                case \"ArrayExpression\":\n                  deps = valuesFromArrayExpression(node[\"arguments\"][0]);\n              }\n              break;\n            case 3:\n              moduleName = node[\"arguments\"][0].value;\n              deps = valuesFromArrayExpression(node[\"arguments\"][1]);\n          }\n          definitions.push({\n            method: \"define\",\n            moduleName: moduleName,\n            deps: deps != null ? deps : [],\n            argumentsLength: node[\"arguments\"].length,\n            node: node\n          });\n          isInsideDefine = true;\n        }\n        if ((node.callee.name === \"require\" || node.callee.name === \"requirejs\") && node[\"arguments\"].length > 0 && node[\"arguments\"][0].type === \"ArrayExpression\") {\n          defineAncestors = _.any(state.slice(0, -1), function(ancestorNode) {\n            return ancestorNode.type === \"CallExpression\" && (ancestorNode.callee.name === \"define\" || ancestorNode.callee.name === \"require\" || ancestorNode.callee.name === \"requirejs\");\n          });\n          if (config.findNestedDependencies || !defineAncestors) {\n            return definitions.push({\n              method: \"require\",\n              moduleName: void 0,\n              deps: valuesFromArrayExpression(node[\"arguments\"][0]),\n              node: node\n            });\n          }\n        }\n      }\n    });\n    callback(null, file, definitions);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/node_modules/amd-optimize/lib/util.js":"(function() {\n  var fixModuleName, logger, path, printTree, through;\n\n  path = require(\"path\");\n\n  through = require(\"through2\");\n\n  module.exports.printTree = printTree = function(currentModule, prefix) {\n    var depPrefix;\n    if (prefix == null) {\n      prefix = \"\";\n    }\n    console.log(prefix, currentModule.name, \"(\" + (path.relative(process.cwd(), currentModule.file.relative)) + \")\");\n    depPrefix = prefix.replace(\"├\", \"|\").replace(\"└\", \" \").replace(/─/g, \" \");\n    return currentModule.deps.forEach(function(depModule, i) {\n      if (i + 1 < currentModule.deps.length) {\n        return printTree(depModule, depPrefix + \" ├──\");\n      } else {\n        return printTree(depModule, depPrefix + \" └──\");\n      }\n    });\n  };\n\n  module.exports.logger = logger = function() {\n    return through.obj(function(file, enc, callback) {\n      console.log(\">>\", path.relative(process.cwd(), file.path));\n      return callback(null, file);\n    });\n  };\n\n  module.exports.fixModuleName = fixModuleName = function(moduleName) {\n    return moduleName.replace(/\\\\/g, '/');\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/node_modules/amd-optimize/lib/export.js":"(function() {\n  var _, b, escodegen, fixModule, path, through, vinylSourcemapsApply;\n\n  _ = require(\"lodash\");\n\n  b = require(\"ast-types\").builders;\n\n  escodegen = require(\"escodegen\");\n\n  through = require(\"through2\");\n\n  path = require(\"path\");\n\n  vinylSourcemapsApply = require(\"vinyl-sourcemaps-apply\");\n\n  module.exports = fixModule = function(options) {\n    if (options == null) {\n      options = {};\n    }\n    options = _.defaults(options, {\n      wrapShim: true\n    });\n    return through.obj(function(module, enc, done) {\n      var ast, defineBody, defineCall, defineReturnStatement, generatedCode, sourceFile;\n      if (module.isShallow) {\n        done();\n        return;\n      }\n      ast = module.file.ast;\n      delete module.file.ast;\n      if (!module.hasDefine) {\n        defineReturnStatement = b.returnStatement(module.exports ? b.identifier(module.exports) : null);\n        if (options.wrapShim && module.isShimmed) {\n          defineBody = ast.body.concat([defineReturnStatement]);\n        } else {\n          defineBody = [defineReturnStatement];\n        }\n        defineCall = b.callExpression(b.identifier(\"define\"), [\n          b.literal(module.name), b.arrayExpression(module.deps.map(function(dep) {\n            return b.literal(dep.name);\n          })), b.functionExpression(null, [], b.blockStatement(defineBody))\n        ]);\n        if (options.wrapShim && module.isShimmed) {\n          ast.body = [b.expressionStatement(defineCall)];\n        } else {\n          ast.body.push(b.expressionStatement(defineCall));\n        }\n      } else if (module.isAnonymous) {\n        module.astNodes.forEach((function(_this) {\n          return function(astNode) {\n            if (astNode.callee.name === \"define\" && (astNode[\"arguments\"].length === 1 || (astNode[\"arguments\"].length === 2 && astNode[\"arguments\"][0].type === \"ArrayExpression\"))) {\n              return astNode[\"arguments\"] = [\n                b.literal(module.name), b.arrayExpression(module.deps.map(function(dep) {\n                  return b.literal(dep.name);\n                })), _.last(astNode[\"arguments\"])\n              ];\n            }\n          };\n        })(this));\n      }\n      if (module.hasDefine && module.isShimmed) {\n        ast.body = [b.expressionStatement(b.callExpression(b.memberExpression(b.functionExpression(null, [], b.blockStatement(ast.body)), b.identifier(\"call\"), false), [b.thisExpression()]))];\n      }\n      sourceFile = module.file.clone();\n      sourceFile.sourceMap = module.file.sourceMap;\n      if (sourceFile.sourceMap) {\n        generatedCode = escodegen.generate(ast, {\n          comment: options.preserveComments,\n          sourceMap: true,\n          sourceMapWithCode: true,\n          file: sourceFile.sourceMap.file\n        });\n        sourceFile.contents = new Buffer(generatedCode.code, \"utf8\");\n        vinylSourcemapsApply(sourceFile, generatedCode.map.toJSON());\n      } else if (!options.preserveFiles) {\n        sourceFile = module.file.clone();\n        sourceFile.contents = new Buffer(escodegen.generate(ast, {\n          comment: options.preserveComments\n        }), \"utf8\");\n      }\n      this.push(sourceFile);\n      return done();\n    });\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-amd-optimize/node_modules/amd-optimize/gulpfile.js":"require(\"coffee-script\").register();\n\nvar gulp     = require(\"gulp\");\nvar coffee   = require(\"gulp-coffee\");\nvar gif      = require(\"gulp-if\");\nvar mocha    = require(\"gulp-mocha\");\nvar concat   = require(\"gulp-concat\");\nvar util     = require(\"gulp-util\");\nvar uglify   = require(\"gulp-uglify\");\nvar rjs      = require(\"./src/index.coffee\");\n\nvar path     = require(\"path\");\nvar through  = require(\"through2\");\n\n\ngulp.task(\"compile\", function (){\n  return gulp.src(\"src/**/*.coffee\")\n    .pipe(coffee())\n    .pipe(gulp.dest(\"lib\"));\n});\n\n\ngulp.task(\"test\", [\"compile\"], function () {\n  return gulp.src(\"test/*_test.coffee\")\n    .pipe(mocha({ reporter : \"spec\" }));\n});\n\n\nfunction logger() {\n  return through.obj(function (file, enc, callback) {\n    util.log(\">>\", util.colors.yellow(path.relative(process.cwd(), file.path)));\n    callback(null, file);\n  });\n}\n\n\ngulp.task(\"sample\", function () {\n  return gulp.src(\"test/fixtures/core/**/*.js\")\n    .pipe(rjs(\"nested_requirejs\"))\n    .pipe(gulp.dest(\".tmp\"));\n})\n\ngulp.task(\"example\", function () {\n  return gulp.src(\"build/{javascripts,bower_components}/**/*.{js,coffee}\")\n    .pipe(gif(function (file) { return path.extname(file.path) == \".coffee\"; }, coffee()))\n    // Traces all modules and outputs them in the correct order. Also wraps shimmed modules.\n    .pipe(rjs(\"index\", {\n      configFile : gulp.src(\"build/javascripts/require_config.coffee\").pipe(coffee()),\n      wrapShim : true,\n      baseUrl : \"build/javascripts\",\n      paths : {\n        cordova : \"empty:\",\n        underscore : \"../bower_components/lodash/dist/lodash\"\n      }\n    }))\n    .pipe(concat(\"index.js\"))\n    .pipe(logger())\n    .pipe(gulp.dest(\"dist\"));\n});\n\ngulp.task(\"example2\", function () {\n  // Traces all modules and outputs them in the correct order. Also wraps shimmed modules.\n  var source = rjs(\"main\", {\n      configFile : gulp.src(\"public/javascripts/require_config.coffee\").pipe(coffee()),\n      wrapShim : true,\n      baseUrl : \"public/javascripts\",\n      paths : {\n        routes : \"empty:\"\n      },\n      loader : rjs.loader(\n        function (moduleName) { return path.join(\"public/javascripts\", moduleName + \".{js,coffee}\") },\n        function () { return gif(function (file) { return path.extname(file.path) == \".coffee\"; }, coffee()) }\n      )\n    });\n\n  source.end();\n  return source\n    .pipe(concat(\"main.js\"))\n    .pipe(uglify())\n    .pipe(gulp.dest(\"dist\"))\n    .pipe(logger());\n});\n\ngulp.task(\"default\", [\"compile\", \"test\"]);\n\n\n"}